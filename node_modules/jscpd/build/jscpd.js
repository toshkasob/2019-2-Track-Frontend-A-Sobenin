"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bytes = require("bytes");
var safe_1 = require("colors/safe");
var fast_glob_1 = require("fast-glob");
var fs_1 = require("fs");
var clone_1 = require("./clone");
var detector_1 = require("./detector");
var events_1 = require("./events");
var listeners_1 = require("./listeners");
var modes_1 = require("./modes");
var reporters_1 = require("./reporters");
var models_1 = require("./stores/models");
var stores_manager_1 = require("./stores/stores-manager");
var tokenizer_1 = require("./tokenizer");
var formats_1 = require("./tokenizer/formats");
var options_1 = require("./utils/options");
var source_1 = require("./utils/source");
var gitignoreToGlob = require('gitignore-to-glob');
function getStoreManager() {
    return stores_manager_1.StoresManager;
}
exports.getStoreManager = getStoreManager;
function isFile(path) {
    try {
        var stat = fs_1.lstatSync(path);
        return stat.isFile();
    }
    catch (e) {
        // lstatSync throws an error if path doesn't exist
        return false;
    }
}
var JSCPD = /** @class */ (function () {
    function JSCPD(options, eventEmitter) {
        if (options === void 0) { options = {}; }
        this._files = [];
        this._clones = [];
        this._preHooks = [];
        this._postHooks = [];
        this.eventEmitter = eventEmitter || new events_1.JscpdEventEmitter();
        this._options = __assign({}, options_1.getDefaultOptions(), options);
        this.initializeListeners();
        this.initializeReporters();
        this.detector = new detector_1.Detector(this._options, this.eventEmitter);
        stores_manager_1.StoresManager.initialize(this._options.storeOptions);
    }
    Object.defineProperty(JSCPD.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (value) {
            this._options = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JSCPD.prototype, "files", {
        get: function () {
            return this._files;
        },
        set: function (value) {
            this._files = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JSCPD.prototype, "clones", {
        get: function () {
            return this._clones;
        },
        set: function (value) {
            this._clones = value;
        },
        enumerable: true,
        configurable: true
    });
    JSCPD.prototype.attachPreHook = function (hook) {
        this._preHooks.push(hook);
    };
    JSCPD.prototype.attachPostHook = function (hook) {
        this._postHooks.push(hook);
    };
    JSCPD.prototype.detect = function (code, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all(this._preHooks.map(function (hook) { return hook.use(_this); }))];
                    case 1:
                        _b.sent();
                        _a = this;
                        return [4 /*yield*/, this._detect(code, __assign({}, options, { source: code }))];
                    case 2:
                        _a._clones = _b.sent();
                        return [4 /*yield*/, this._detectionFinished(this._clones, true)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, this._clones];
                }
            });
        });
    };
    JSCPD.prototype.detectInFiles = function (pathToFiles) {
        if (pathToFiles === void 0) { pathToFiles = []; }
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, _b, ignore, gitignorePatterns, sources, sources_1, sources_1_1, source, _c, _d, _e, e_1_1;
            var _this = this;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        ignore = this._options.ignore || [];
                        if (this._options.gitignore && fs_1.existsSync(pathToFiles + '/.gitignore')) {
                            gitignorePatterns = gitignoreToGlob(pathToFiles + '/.gitignore') || [];
                            gitignorePatterns = gitignorePatterns.map(function (pattern) { return (pattern.substr(pattern.length - 1) === '/' ? pattern + "**/*" : pattern); });
                            ignore.push.apply(ignore, __spread(gitignorePatterns));
                            ignore.map(function (pattern) { return pattern.replace('!', ''); });
                        }
                        this._files = fast_glob_1.sync(pathToFiles.map(function (path) {
                            if (isFile(path)) {
                                return path;
                            }
                            return path.substr(path.length - 1) === '/' ? path + "**/*" : path + "/**/*";
                        }), {
                            ignore: ignore,
                            onlyFiles: true,
                            dot: true,
                            stats: true,
                            absolute: true,
                            followSymlinkedDirectories: !this.options.noSymlinks
                        });
                        this._files = this._files.filter(function (stats) {
                            var path = stats.path;
                            var format = formats_1.getFormatByFile(path, _this._options.formatsExts);
                            return format && _this._options.format && _this._options.format.includes(format);
                        });
                        if (this._options.debug) {
                            console.log(safe_1.bold("Found " + this._files.length + " files to detect."));
                        }
                        return [4 /*yield*/, Promise.all(this._preHooks.map(function (hook) { return hook.use(_this); }))];
                    case 1:
                        _f.sent();
                        sources = this._files
                            .filter(function (stats) {
                            var path = stats.path;
                            if (_this._options.debug) {
                                console.log(path);
                                return false;
                            }
                            if (stats.size > bytes(options_1.getOption('maxSize', _this._options))) {
                                _this.eventEmitter.emit(events_1.SOURCE_SKIPPED_EVENT, stats);
                            }
                            return !(stats.size > bytes(options_1.getOption('maxSize', _this._options)));
                        })
                            .filter(function (stats) {
                            var path = stats.path;
                            var source = source_1.sourceToString({ id: path });
                            var lines = source.split('\n').length;
                            if (lines < options_1.getOption('minLines', _this._options) || lines > options_1.getOption('maxLines', _this._options)) {
                                _this.eventEmitter.emit(events_1.SOURCE_SKIPPED_EVENT, __assign({}, stats, { lines: lines }));
                                return false;
                            }
                            return true;
                        })
                            .map(function (stats) {
                            var path = stats.path;
                            var format = formats_1.getFormatByFile(path, _this._options.formatsExts);
                            var source = source_1.sourceToString({ id: path });
                            var sourceOptions = {
                                id: path,
                                format: format,
                                detectionDate: new Date().getTime(),
                                lastUpdateDate: stats.mtimeMs
                            };
                            return { source: source, sourceOptions: sourceOptions };
                        });
                        _f.label = 2;
                    case 2:
                        _f.trys.push([2, 7, 8, 9]);
                        sources_1 = __values(sources), sources_1_1 = sources_1.next();
                        _f.label = 3;
                    case 3:
                        if (!!sources_1_1.done) return [3 /*break*/, 6];
                        source = sources_1_1.value;
                        _d = (_c = (_b = this._clones).push).apply;
                        _e = [_b];
                        return [4 /*yield*/, this._detect(source.source, source.sourceOptions)];
                    case 4:
                        _d.apply(_c, _e.concat([__spread.apply(void 0, [(_f.sent())])]));
                        _f.label = 5;
                    case 5:
                        sources_1_1 = sources_1.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _f.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return)) _a.call(sources_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9: return [4 /*yield*/, this._detectionFinished(this._clones)];
                    case 10:
                        _f.sent();
                        return [2 /*return*/, this._clones];
                }
            });
        });
    };
    JSCPD.prototype.on = function (event, fn, context) {
        this.eventEmitter.on(event, fn, context);
    };
    JSCPD.prototype._detect = function (source, options) {
        return __awaiter(this, void 0, void 0, function () {
            var mode, tokens, tokenMaps;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tokenizer_1.initLanguages([options.format]);
                        mode = modes_1.getModeHandler(options_1.getOption('mode', this._options));
                        tokens = tokenizer_1.tokenize(source, options.format)
                            .filter(function (token) { return mode(token, _this._options); })
                            .map(function (token) {
                            if (options_1.getOption('ignoreCase', _this._options)) {
                                token.value = token.value.toLocaleLowerCase();
                            }
                            return token;
                        });
                        tokenMaps = tokenizer_1.createTokensMaps(tokens, options_1.getOption('minTokens', this._options)).map(function (tokenMap) {
                            var subSource = __assign({}, options, { format: tokenMap.getFormat(), range: [tokenMap.getStartPosition(), tokenMap.getEndPosition()], lines: clone_1.getSourceFragmentLength(options, tokenMap.getStartPosition(), tokenMap.getEndPosition()) });
                            tokenMap.setSourceId(options.id);
                            _this.eventEmitter.emit(events_1.MATCH_SOURCE_EVENT, subSource);
                            return tokenMap;
                        });
                        return [4 /*yield*/, Promise.all(tokenMaps.map(function (tokenMap) { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.detector.detectByMap(tokenMap)];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); })).then(function (clns) {
                                return [].concat.apply([], __spread(clns));
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    JSCPD.prototype.initializeReporters = function () {
        var _this = this;
        reporters_1.registerReportersByName(this._options);
        Object.values(reporters_1.getRegisteredReporters()).map(function (reporter) {
            reporter.attach(_this.eventEmitter);
        });
    };
    JSCPD.prototype.initializeListeners = function () {
        var _this = this;
        listeners_1.registerListenerByName(this._options);
        Object.values(listeners_1.getRegisteredListeners()).map(function (listener) {
            listener.attach(_this.eventEmitter);
        });
    };
    JSCPD.prototype._detectionFinished = function (clones, pesists) {
        if (pesists === void 0) { pesists = false; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(this._postHooks.map(function (hook) { return hook.use(_this); }))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.generateReports(clones)];
                    case 2:
                        _a.sent();
                        this.eventEmitter.emit(events_1.END_EVENT, clones);
                        if (!pesists) {
                            this.eventEmitter.on(events_1.END_EVENT, function () { return stores_manager_1.StoresManager.close(); });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    JSCPD.prototype.generateReports = function (clones) {
        return __awaiter(this, void 0, void 0, function () {
            var statistic;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, stores_manager_1.StoresManager.getStore(models_1.STATISTIC_DB).get(options_1.getOption('executionId', this.options))];
                    case 1:
                        statistic = _a.sent();
                        Object.values(reporters_1.getRegisteredReporters()).map(function (reporter) {
                            reporter.report(clones, statistic);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return JSCPD;
}());
exports.JSCPD = JSCPD;
//# sourceMappingURL=data:application/json;base64,