"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var prismjs_1 = require("prismjs");
var formats_1 = require("./formats/formats");
var loadLanguages = require('prismjs/components/');
var ignore = {
    ignore: [
        {
            pattern: /(jscpd:ignore-start)[\s\S]*?(?=jscpd:ignore-end)/,
            lookbehind: true,
            greedy: true
        },
        {
            pattern: /jscpd:ignore-start/,
            greedy: false
        },
        {
            pattern: /jscpd:ignore-end/,
            greedy: false
        }
    ]
};
var punctuation = {
    new_line: /\n/,
    empty: /\s+/
};
prismjs_1.languages.markup.script.inside = __assign({}, ignore, prismjs_1.languages.markup.script.inside, punctuation);
prismjs_1.languages.markup.style.inside = __assign({}, ignore, prismjs_1.languages.markup.style.inside, punctuation);
function getLanguagePrismName(lang) {
    if (formats_1.FORMATS.hasOwnProperty(lang) && formats_1.FORMATS[lang].parent) {
        return formats_1.FORMATS[lang].parent;
    }
    return lang;
}
function initLanguages(langs) {
    loadLanguages(langs.map(getLanguagePrismName));
    Object.keys(prismjs_1.languages).forEach(function (lang) {
        prismjs_1.languages[lang] =
            typeof prismjs_1.languages[lang] === 'object' ? __assign({}, ignore, prismjs_1.languages[lang], punctuation) : prismjs_1.languages[lang];
    });
}
exports.initLanguages = initLanguages;
function tokenize(code, language) {
    var length = 0;
    var line = 1;
    var column = 1;
    initLanguages([language]);
    var tokens = [];
    prismjs_1.tokenize(code, prismjs_1.languages[getLanguagePrismName(language)]).forEach(function (t) { return (tokens = tokens.concat(createTokens(t, language))); });
    function sanitizeLangName(name) {
        return name && name.replace ? name.replace('language-', '') : 'unknown';
    }
    function createTokenFromString(token, lang) {
        return [
            {
                format: lang,
                type: 'default',
                value: token,
                length: token.length
            }
        ];
    }
    function createTokenFromFlatToken(token, lang) {
        return [
            {
                format: lang,
                type: token.type,
                value: token.content,
                length: token.length
            }
        ];
    }
    function createTokens(token, lang) {
        if (token instanceof prismjs_1.Token && typeof token.content === 'string') {
            return createTokenFromFlatToken(token, lang);
        }
        if (token instanceof prismjs_1.Token && Array.isArray(token.content)) {
            var res_1 = [];
            token.content.forEach(function (t) { return (res_1 = res_1.concat(createTokens(t, token.alias ? sanitizeLangName(token.alias) : lang))); });
            return res_1;
        }
        return createTokenFromString(token, lang);
    }
    function calculateLocation(token) {
        var result = token;
        var lines = result.value.split('\n');
        var newLines = lines.length - 1;
        var start = {
            line: line,
            column: column
        };
        column = newLines !== 0 ? lines[lines.length - 1].length + 1 : column + lines[lines.length - 1].length;
        var end = {
            line: line + newLines,
            column: column
        };
        result.loc = { start: start, end: end };
        result.range = [length, length + result.length];
        length += result.length;
        line += newLines;
        return result;
    }
    return tokens.map(calculateLocation).filter(function (t) {
        return t.format !== 'important' && t.format !== 'property' && t.format !== 'url';
    });
}
exports.tokenize = tokenize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpc20uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdG9rZW5pemVyL3ByaXNtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQ0FBd0c7QUFFeEcsNkNBQTRDO0FBRTVDLElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBRXJELElBQU0sTUFBTSxHQUFHO0lBQ2IsTUFBTSxFQUFFO1FBQ047WUFDRSxPQUFPLEVBQUUsa0RBQWtEO1lBQzNELFVBQVUsRUFBRSxJQUFJO1lBQ2hCLE1BQU0sRUFBRSxJQUFJO1NBQ2I7UUFDRDtZQUNFLE9BQU8sRUFBRSxvQkFBb0I7WUFDN0IsTUFBTSxFQUFFLEtBQUs7U0FDZDtRQUNEO1lBQ0UsT0FBTyxFQUFFLGtCQUFrQjtZQUMzQixNQUFNLEVBQUUsS0FBSztTQUNkO0tBQ0Y7Q0FDb0IsQ0FBQztBQUV4QixJQUFNLFdBQVcsR0FBRztJQUNsQixRQUFRLEVBQUUsSUFBSTtJQUNkLEtBQUssRUFBRSxLQUFLO0NBQ1MsQ0FBQztBQUV2QixtQkFBUyxDQUFDLE1BQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxnQkFDbEMsTUFBTSxFQUNMLG1CQUFTLENBQUMsTUFBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQ3ZDLFdBQVcsQ0FDZixDQUFDO0FBQ0QsbUJBQVMsQ0FBQyxNQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sZ0JBQ2pDLE1BQU0sRUFDTCxtQkFBUyxDQUFDLE1BQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUN0QyxXQUFXLENBQ2YsQ0FBQztBQUVGLFNBQVMsb0JBQW9CLENBQUMsSUFBWTtJQUN4QyxJQUFJLGlCQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLGlCQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFO1FBQ3hELE9BQU8saUJBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFnQixDQUFDO0tBQ3ZDO0lB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