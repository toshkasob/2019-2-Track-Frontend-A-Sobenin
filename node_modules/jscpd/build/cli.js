"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var safe_1 = require("colors/safe");
var commander_1 = require("commander");
var _1 = require(".");
var blamer_1 = require("./hooks/post/blamer");
var stores_manager_1 = require("./stores/stores-manager");
var formats_1 = require("./tokenizer/formats");
var options_1 = require("./utils/options");
var packageJson = require(__dirname + '/../package.json');
exports.cli = new commander_1.Command(packageJson.name)
    .version(packageJson.version)
    .usage('[options] <path ...>')
    .description(packageJson.description);
exports.cli.option('-l, --min-lines [number]', 'min size of duplication in code lines (Default is ' + options_1.getOption('minLines') + ')');
exports.cli.option('-k, --min-tokens [number]', 'min size of duplication in code tokens (Default is ' + options_1.getOption('minTokens') + ')');
exports.cli.option('-x, --max-lines [number]', 'max size of source in lines (Default is ' + options_1.getOption('maxLines') + ')');
exports.cli.option('-z, --max-size [string]', 'max size of source in bytes, examples: 1kb, 1mb, 120kb (Default is ' + options_1.getOption('maxSize') + ')');
exports.cli.option('-t, --threshold [number]', 'threshold for duplication, in case duplications >= threshold jscpd will exit with error');
exports.cli.option('-c, --config [string]', 'path to config file (Default is .cpd.json in <path>)');
exports.cli.option('-i, --ignore [string]', 'glob pattern for files what should be excluded from duplication detection');
exports.cli.option('-r, --reporters [string]', 'reporters or list of reporters separated with coma to use (Default is time,console)');
exports.cli.option('-o, --output [string]', 'reporters to use (Default is ./report/)');
exports.cli.option('-m, --mode [string]', 'mode of quality of search, can be "strict", "mild" and "weak" (Default is "' + options_1.getOption('mode') + '")');
exports.cli.option('-f, --format [string]', 'format or formats separated by coma (Example php,javascript,python)');
exports.cli.option('-b, --blame', 'blame authors of duplications (get information about authors from git)');
exports.cli.option('-s, --silent', 'do not write detection progress and result to a console');
exports.cli.option('-a, --absolute', 'use absolute path in reports');
exports.cli.option('-n, --noSymlinks', 'dont use symlinks for detection in files');
exports.cli.option('--ignoreCase', 'ignore case of symbols in code (experimental)');
exports.cli.option('-g, --gitignore', 'ignore all files from .gitignore file');
exports.cli.option('--formats-exts [string]', 'list of formats with file extensions (javascript:es,es6;dart:dt)');
// cli.option('--cache', 'Cache results of duplication detection');
exports.cli.option('-d, --debug', 'show debug information(options list and selected files)');
exports.cli.option('--list', 'show list of total supported formats');
exports.cli.option('--xsl-href [string]', '(Deprecated) Path to xsl file');
exports.cli.option('-p, --path [string]', '(Deprecated) Path to repo, use `jscpd <path>`');
exports.cli.parse(process.argv);
var options = options_1.prepareOptions(exports.cli);
if (exports.cli.list) {
    console.log(safe_1.bold(safe_1.white('Supported formats: ')));
    console.log(formats_1.getSupportedFormats().join(', '));
    process.exit(0);
}
if (exports.cli.debug) {
    console.log(safe_1.bold(safe_1.white('Options:')));
    console.dir(options);
}
var cpd = new _1.JSCPD(options);
if (cpd.options.blame) {
    cpd.attachPostHook(new blamer_1.BlamerPostHook());
}
var clones = cpd.detectInFiles(options.path);
clones.then(function () {
    stores_manager_1.StoresManager.close();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUEwQztBQUMxQyx1Q0FBb0M7QUFDcEMsc0JBQTRDO0FBQzVDLDhDQUFxRDtBQUNyRCwwREFBd0Q7QUFDeEQsK0NBQTBEO0FBQzFELDJDQUE0RDtBQUU1RCxJQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFDLENBQUM7QUFFL0MsUUFBQSxHQUFHLEdBQVksSUFBSSxtQkFBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7S0FDdEQsT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7S0FDNUIsS0FBSyxDQUFDLHNCQUFzQixDQUFDO0tBQzdCLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFeEMsV0FBRyxDQUFDLE1BQU0sQ0FDUiwwQkFBMEIsRUFDMUIsb0RBQW9ELEdBQUcsbUJBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQ25GLENBQUM7QUFDRixXQUFHLENBQUMsTUFBTSxDQUNSLDJCQUEyQixFQUMzQixxREFBcUQsR0FBRyxtQkFBUyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQUcsQ0FDckYsQ0FBQztBQUNGLFdBQUcsQ0FBQyxNQUFNLENBQUMsMEJBQTBCLEVBQUUsMENBQTBDLEdBQUcsbUJBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNqSCxXQUFHLENBQUMsTUFBTSxDQUNSLHlCQUF5QixFQUN6QixxRUFBcUUsR0FBRyxtQkFBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FDbkcsQ0FBQztBQUNGLFdBQUcsQ0FBQyxNQUFNLENBQ1IsMEJBQTBCLEVBQzFCLHlGQUF5RixDQUMxRixDQUFDO0FBQ0YsV0FBRyxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSxzREFBc0QsQ0FBQyxDQUFDO0FBQzVGLFdBQUcsQ0FB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