"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var safe_1 = require("colors/safe");
var fs_1 = require("fs");
var fs_extra_1 = require("fs-extra");
var path_1 = require("path");
var pug_1 = require("pug");
var utils_1 = require("../utils");
var HtmlReporter = /** @class */ (function () {
    function HtmlReporter(options) {
        this.options = options;
    }
    HtmlReporter.prototype.attach = function () { };
    HtmlReporter.prototype.report = function (clones, statistic) {
        var reportFunction = pug_1.compileFile(__dirname + '/../../html/report.pug');
        var formatsReports = statistic && statistic.formats
            ? Object.keys(statistic.formats).map(function (format) {
                return { value: statistic.formats[format].total.lines, name: format };
            })
            : [];
        var html = reportFunction(__assign({ total: {} }, statistic, { formatsReports: formatsReports,
            clones: clones,
            getPath: utils_1.getPath,
            getSourceLocation: utils_1.getSourceLocation,
            generateLine: utils_1.generateLine, options: this.options }));
        if (this.options.output) {
            fs_extra_1.ensureDirSync(this.options.output);
            fs_1.writeFileSync(path_1.join(this.options.output, 'jscpd-report.html'), html);
            console.log(safe_1.green("HTML report saved to " + path_1.join(this.options.output, 'jscpd-report.html')));
        }
    };
    return HtmlReporter;
}());
exports.HtmlReporter = HtmlReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBvcnRlcnMvaHRtbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsb0NBQW9DO0FBQ3BDLHlCQUFtQztBQUNuQyxxQ0FBeUM7QUFDekMsNkJBQTRCO0FBQzVCLDJCQUFrQztBQUVsQyxrQ0FBb0U7QUFFcEU7SUFDRSxzQkFBb0IsT0FBaUI7UUFBakIsWUFBTyxHQUFQLE9BQU8sQ0FBVTtJQUFHLENBQUM7SUFFbEMsNkJBQU0sR0FBYixjQUF1QixDQUFDO0lBRWpCLDZCQUFNLEdBQWIsVUFBYyxNQUFnQixFQUFFLFNBQXFCO1FBQ25ELElBQU0sY0FBYyxHQUFHLGlCQUFXLENBQUMsU0FBUyxHQUFHLHdCQUF3QixDQUFDLENBQUM7UUFFekUsSUFBTSxjQUFjLEdBQ2xCLFNBQVMsSUFBSSxTQUFTLENBQUMsT0FBTztZQUM1QixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsTUFBTTtnQkFDdkMsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO1lBQ3hFLENBQUMsQ0FBQztZQUNKLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFVCxJQUFNLElBQUksR0FBRyxjQUFjLFlBQ3pCLEtBQUssRUFBRSxFQUFFLElBQ04sU0FBUyxJQUNaLGNBQWMsZ0JBQUE7WUFDZCxNQUFNLFFBQUE7WUFDTixPQUFPLGlCQUFBO1lBQ1AsaUJBQWlCLDJCQUFBO1lBQ2pCLFlBQVksc0JBQUEsRUFDWixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sSUFDckIsQ0FBQztRQUNILElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDdkIsd0JBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25DLGtCQUFhLENBQUMsV0FBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLG1CQUFtQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFLLENBQUMsMEJBQXdCLFdBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxtQkFBbUIsQ0FBRyxDQUFDLENBQUMsQ0FBQztTQUM5RjtJQUNILENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUEvQkQsSUErQkM7QUEvQlksb0NBQVkifQ==