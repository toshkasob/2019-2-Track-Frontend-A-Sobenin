"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var safe_1 = require("colors/safe");
var crypto_1 = require("crypto");
var path_1 = require("path");
var process_1 = require("process");
function md5(value) {
    return crypto_1.createHash('md5')
        .update(value)
        .digest('hex');
}
exports.md5 = md5;
function getPath(options, path) {
    return options.absolute ? path : path_1.relative(process_1.cwd(), path);
}
exports.getPath = getPath;
function getPathConsoleString(options, path) {
    return safe_1.bold(safe_1.green(getPath(options, path)));
}
exports.getPathConsoleString = getPathConsoleString;
function getSourceLocation(start, end) {
    return start.line + ":" + start.column + " - " + end.line + ":" + end.column;
}
exports.getSourceLocation = getSourceLocation;
function generateLine(clone, position, line) {
    var lineNumberA = (clone.duplicationA.start.line + position).toString();
    var lineNumberB = (clone.duplicationB.start.line + position).toString();
    if (clone.duplicationA.blame && clone.duplicationB.blame) {
        return [
            lineNumberA,
            clone.duplicationA.blame[lineNumberA] ? clone.duplicationA.blame[lineNumberA].author : '',
            clone.duplicationA.blame[lineNumberA] && clone.duplicationB.blame[lineNumberB]
                ? compareDates(clone.duplicationA.blame[lineNumberA].date, clone.duplicationB.blame[lineNumberB].date)
                : '',
            lineNumberB,
            clone.duplicationB.blame[lineNumberB] ? clone.duplicationB.blame[lineNumberB].author : '',
            safe_1.grey(line)
        ];
    }
    else {
        return [lineNumberA, lineNumberB, safe_1.grey(line)];
    }
}
exports.generateLine = generateLine;
var compareDates = function (firstDate, secondDate) {
    var first = new Date(firstDate);
    var second = new Date(secondDate);
    switch (true) {
        case first < second:
            return '=>';
        case first > second:
            return '<=';
        default:
            return '==';
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBZ0Q7QUFDaEQsaUNBQW9DO0FBQ3BDLDZCQUFnQztBQUNoQyxtQ0FBOEI7QUFJOUIsU0FBZ0IsR0FBRyxDQUFDLEtBQWE7SUFDL0IsT0FBTyxtQkFBVSxDQUFDLEtBQUssQ0FBQztTQUNyQixNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25CLENBQUM7QUFKRCxrQkFJQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxPQUFpQixFQUFFLElBQVk7SUFDckQsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGVBQVEsQ0FBQyxhQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRkQsMEJBRUM7QUFFRCxTQUFnQixvQkFBb0IsQ0FBQyxPQUFpQixFQUFFLElBQVk7SUFDbEUsT0FBTyxXQUFJLENBQUMsWUFBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFGRCxvREFFQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLEtBQXFCLEVBQUUsR0FBbUI7SUFDMUUsT0FBVSxLQUFLLENBQUMsSUFBSSxTQUFJLEtBQUssQ0FBQyxNQUFNLFdBQU0sR0FBRyxDQUFDLElBQUksU0FBSSxHQUFHLENBQUMsTUFBUSxDQUFDO0FBQ3JFLENBQUM7QUFGRCw4Q0FFQztBQUVELFNBQWdCLFlBQVksQ0FBQyxLQUFhLEVBQUUsUUFBZ0IsRUFBRSxJQUFZO0lBQ3hFLElBQU0sV0FBVyxHQUFXLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xGLElBQU0sV0FBVyxHQUFXLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xGLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUU7UUFDeEQsT0FBTztZQUNMLFdBQVc7WUFDWCxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3pGLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztnQkFDNUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUN0RyxDQUFDLENBQUMsRUFBRTtZQUNOLFdBQVc7WUFDWCxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3pGLFdBQUksQ0FBQyxJQUFJLENBQUM7U0FDWCxDQUFDO0tBQ0g7U0FBTTtRQUNMLE9BQU8sQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0tBQy9DO0FBQ0gsQ0FBQztBQWpCRCxvQ0FpQkM7QUFFRCxJQUFNLFlBQVksR0FBRyxVQUFDLFNBQWlCLEVBQUUsVUFBa0I7SUFDekQsSUFBTSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbEMsSUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEMsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLEtBQUssR0FBRyxNQUFNO1lBQ2pCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsS0FBSyxLQUFLLEdBQUcsTUFBTTtZQUNqQixPQUFPLElBQUksQ0FBQztRQUNkO1lBQ0UsT0FBTyxJQUFJLENBQUM7S0FDZjtBQUNILENBQUMsQ0FBQyJ9