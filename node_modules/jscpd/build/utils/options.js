"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = require("fs");
var fs_extra_1 = require("fs-extra");
var path_1 = require("path");
var formats_1 = require("../tokenizer/formats");
function getOption(name, options) {
    return options ? options[name] || getDefaultOptions()[name] : getDefaultOptions()[name];
}
exports.getOption = getOption;
function prepareOptions(cli) {
    var config = cli.config ? path_1.resolve(cli.config) : path_1.resolve('.jscpd.json');
    var storedConfig = {};
    var argsConfig;
    var packageJsonConfig;
    argsConfig = {
        minTokens: cli.minTokens ? Number(cli.minTokens) : undefined,
        minLines: cli.minLines ? Number(cli.minLines) : undefined,
        maxLines: cli.maxLines ? Number(cli.maxLines) : undefined,
        maxSize: cli.maxSize,
        debug: cli.debug,
        executionId: cli.executionId,
        silent: cli.silent,
        blame: cli.blame,
        cache: cli.cache,
        output: cli.output,
        xslHref: cli.xslHref,
        format: cli.format,
        formatsExts: parseFormatsExtensions(cli.formatsExts),
        list: cli.list,
        mode: cli.mode,
        absolute: cli.absolute,
        noSymlinks: cli.noSymlinks,
        ignoreCase: cli.ignoreCase,
        gitignore: cli.gitignore
    };
    if (cli.threshold !== undefined) {
        argsConfig.threshold = Number(cli.threshold);
    }
    if (cli.reporters) {
        argsConfig.reporters = cli.reporters.split(',');
    }
    if (cli.format) {
        argsConfig.format = cli.format.split(',');
    }
    if (cli.ignore) {
        argsConfig.ignore = cli.ignore.split(',');
    }
    argsConfig.path = cli.path ? [cli.path].concat(cli.args) : cli.args;
    Object.keys(argsConfig).forEach(function (key) {
        if (typeof argsConfig[key] === 'undefined') {
            delete argsConfig[key];
        }
    });
    if (!fs_1.existsSync(config)) {
        config = '';
    }
    else {
        storedConfig = fs_extra_1.readJSONSync(config);
    }
    if (fs_1.existsSync(process.cwd() + '/package.json')) {
        packageJsonConfig = fs_extra_1.readJSONSync(process.cwd() + '/package.json').jscpd || {};
    }
    var result = __assign({ config: config }, getDefaultOptions(), packageJsonConfig, storedConfig, argsConfig);
    if (result.hasOwnProperty('config') && result.config && path_1.isAbsolute(result.config) && result.path) {
        result.path = result.path.map(function (path) { return path_1.resolve(path_1.dirname(config), path); });
    }
    result.reporters = result.reporters || [];
    result.listeners = result.listeners || [];
    if (result.silent) {
        result.reporters = result.reporters.filter(function (reporter) { return reporter.indexOf('console') === -1; }).concat('silent');
    }
    if (result.threshold !== undefined) {
        result.reporters = __spread(result.reporters, ['threshold']);
    }
    result.reporters = __spread(result.reporters, ['time']);
    result.reporters = __spread(new Set(result.reporters));
    return result;
}
exports.prepareOptions = prepareOptions;
function getDefaultOptions() {
    return {
        executionId: new Date().toISOString(),
        path: [process.cwd()],
        minLines: 5,
        maxLines: 500,
        maxSize: '30kb',
        minTokens: 50,
        output: './report',
        reporters: ['console', 'time'],
        listeners: ['statistic'],
        ignore: [],
        mode: 'mild',
        threshold: undefined,
        format: __spread(formats_1.getSupportedFormats()),
        formatsExts: {},
        debug: false,
        silent: false,
        blame: false,
        cache: true,
        absolute: false,
        noSymlinks: false,
        ignoreCase: false,
        gitignore: false,
        reportersOptions: {}
    };
}
exports.getDefaultOptions = getDefaultOptions;
function parseFormatsExtensions(extensions) {
    var result = {};
    if (extensions) {
        extensions.split(';').forEach(function (format) {
            var pair = format.split(':');
            result[pair[0]] = pair[1].split(',');
        });
    }
    else {
        return undefined;
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLHlCQUFnQztBQUNoQyxxQ0FBd0M7QUFDeEMsNkJBQW9EO0FBRXBELGdEQUEyRDtBQUUzRCxTQUFnQixTQUFTLENBQUMsSUFBWSxFQUFFLE9BQWtCO0lBQ3hELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBRSxPQUFlLENBQUMsSUFBSSxDQUFDLElBQUssaUJBQWlCLEVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUUsaUJBQWlCLEVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNySCxDQUFDO0FBRkQsOEJBRUM7QUFFRCxTQUFnQixjQUFjLENBQUMsR0FBWTtJQUN6QyxJQUFJLE1BQU0sR0FBVyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxjQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDL0UsSUFBSSxZQUFZLEdBQVEsRUFBRSxDQUFDO0lBQzNCLElBQUksVUFBZSxDQUFDO0lBQ3BCLElBQUksaUJBQXNCLENBQUM7SUFDM0IsVUFBVSxHQUFHO1FBQ1gsU0FBUyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7UUFDNUQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7UUFDekQsUUFBUSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FB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